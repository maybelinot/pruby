Define a class MorseCoder with two methods - encode and decode. As implementation
you can use methods from previous task.

Change the implementation so that the letter separator will be configurable as
a constructor parameter while | will be the default value.

In the same class implement a counter, which is increased whenever encode or decode
method is called. Implement class method that returns current status of the counter.

Define a class VerifiableMorseCoder that inherits from MorseCoder. This new class
will define a method verify which only argument will be string for verification. Method
should encode and then decode the string and verify it is equal to original string.
If they match it should return true, false otherwise.

--------------

Then create a class Bike which simulates bicycle. Initializer will accept 3 mandatory
arguments, max number of rear and front gears and a name. It will also accept optional
arguments - color and size of wheels with default value of 26.

Class will have a register of all bikes that were created. Each bike will start with current
gears 1 and 1. It should also have methods front_gear_up! and front_gear_down! which changes
current gears up and down (respecting maximum and minimum). Also define methods for rear gear.

Then define methods:
* current_gear - outputs string representation of current gear configuration, e.g. "2x7"
* go! - runs for a distance that get evaluated as multiplication of gears and size of a wheel / 10 (e.g. 2.6)
* distance - the distance that the bike already ran, default value of each bike is 0
* action - randomly choose one of following actions front_gear_up! front_gear_down! rear_gear_up! rear_gear_down! go!
with probability 10%, only go will have 60%

You might find rand(n) method useful, it returns number from 0 to n-1

Last method to implement is to_s, which returns string representation of the bike in
following format

@name (@wheel_size"): ran @distance

############################################################################################

Vytvořte třídu MorseCoder, která bude mít dvě metody,
encode a decode. Jako základ použijte implementaci druhé
úlohy.

Změňte implementaci tak, aby se oddělovač (symbol |) nastavoval
jako argument konstruktoru, přičemž symbol | bude výchozí hodnotou.

V rámci třídy MorseCoder implementujte počítadlo, které se zvýší
pokaždé, když se zavolá metoda encode a decode. Implementujte
třídní metody, která vrátí aktuální stav počítadla.

Vytvořte potomka třídy MorseCoder s názvem VerifiableMorseCoder,
která bude definovat metodu verify, jejíž argument bude ověřovací
string. Metoda verify string zakóduje a ihned zase dekóduje, výsledek
porovná s původní hodnotou. Výsledkem tedy bude true pokud jsou
hodnoty stejné, false v opačném případě.

------------

Dále vytvořte třídu Bike simulující jízdní kolo. Konstruktor
bude akceptovat tři povinné parametry, maximální počet předních
a zadních převodů a jméno. Dále bude akceptovat další nepovinné
údaje - barva a velikost kol s výchozí hodnotou 26.

Třída bude mít registr všech vytvořených instancí kol. Každé
kolo bude mít výchozí převody nastavené na 1. Definujte dvě
metody front_gear_up! a front_gear_down! které změní aktuální
přední převod nahoru či dolu (respektující maximum a minimum).
Stejným způsobem definujte metody pro zadní převod.

Dále definujte metody:
* current_gear, která vypíše stringovou reprezentaci aktuálního převodu například "2x7".
* go! - ujede vzdálenost která se spočítá jako přední převod vynásobený zadním převodem a velikostí kol / 10 (tedy např. 2.6 nebo 2.9)
* distance - celková ujetá vzdálenost, výchozí hodnota každého kola je 0
* action - náhodně provede jednu z akcí front_gear_up! front_gear_down! rear_gear_up! rear_gear_down! go!
všechny budou mít pravděpodobnost 1/10, jediná go! bude mít pravděpodobnost 6/10

Pro implementaci metody action použijte rand(n), která vrací náhodné číslo od 0 do n-1

Poslední implementovaná metoda bude to_s která vrátí stringovou reprezentaci kola ve formátu
@name (@wheel_size"): najeto @distance
